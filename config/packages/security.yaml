security:
    # https://symfony.com/doc/current/security.html#c-hashing-passwords
    password_hashers:
        App\Entity\User: 'auto'

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        users:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/_(profiler|wdt)
            security: false
        main:
            stateless: true
            provider: users
            login_throttling: ~
            entry_point: jwt
            json_login:
                check_path: /api/token
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            jwt: ~
            refresh_jwt:
                check_path: /api/token/refresh
            logout:
                path: /api/logout
                delete_cookies: '%cookies%'

    access_control:
        - { path: ^/$, roles: PUBLIC_ACCESS } # Page d'accueil
        - { path: ^/docs, roles: PUBLIC_ACCESS } # Documentation Swagger
        - { path: ^/contexts, roles: PUBLIC_ACCESS } # Contextes JSON-LD
        - { path: ^/api/token, roles: PUBLIC_ACCESS } # Endpoint de connexion
        - { path: ^/api/users, roles: IS_AUTHENTICATED_FULLY } # Gestion utilisateurs protégée
        - { path: ^/, roles: PUBLIC_ACCESS } # Tout le reste public

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
